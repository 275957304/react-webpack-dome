node_modules/* 禁止上传node_modules

npm init

npm install webpack

npm install webpack-dev-server -g   //web 服务器  这个要全局安装吧

webpack 配制

var path = require('path');
module.exports = {
  entry: path.resolve(__dirname, 'app/app.js'),
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'bundle.js'
  }
}


创建app/app.js
document.write('It works');

创建 build/index.html, 填入以下内容: 引入js
<script src="./bundle.js"></script> 


然后可以运行  $webpack  打包
全局安装 webpack-dev-server然后运行  $webpack-dev-server
http://localhost:8080/webpack-dev-server/


配置 package.json
修改 scripts 的键值如下:
"scripts": {
  "start": "webpack-dev-server",
  "build": "webpack"
}

现在执行 npm run build 相当于 webpack, npm run start 相当于 webpack-dev-server. 当项目变得相当复杂时, 你可以使用这

种技巧隐藏其中的细节.


安装依赖
npm install react react-dom --save

为了简化 AJAX 请求代码, 这里引入 jQuery:
npm install jquery --save


安装 Babel 的 loader 以支持 ES6 语法:
npm install babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev

然后配置 webpack.config.js 来使用安装的 loader.

// webpack.config.js
var path = require('path');
module.exports = {
  entry: path.resolve(__dirname, 'app/app.js'),
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'bundle.js'
  },
  module: {
    loaders: [
    {
      test: /\.jsx?$/,
      exclude: /node_modules/,
      loader: 'babel',
      query: {
        presets: ['es2015','react']
      }
    },
    ]
  }
};


#### 接下来测试一下开发环境是否搭建完成.
import $ from 'jquery';
import React from 'react';
import { render } from 'react-dom';

class HelloWorld extends React.Component {
  render() {
    return (
        <div>Hello World</div>
        );
  }
}
render(<HelloWorld />, $('#content')[0]);



//分析所需要组件

NewsList (蓝色): 所有组件的容器.
NewsHeader (绿色): Logo, 标题, 导航栏等.
NewsItem (红色): 对应每条资讯.

mkdir touch 创建一个touch文件夹


getLogo() {
 return (
    <div className="newsHeader-logo">
      <a href="https://news.ycombinator.com/"><img src="PATH_TO_IMAGE" /></a>
    </div>
    );
}

这个方法：里面图片路径
在前面几节的开发中, 还记得你是怎么引入其他的 js 文件的吗? import. 实际上这是 ES6 的模块系统, 这里的 js 文件作为模块被其他模块引入. 但除了 js 文件, 在开发时我们还会涉及其他的资源文件, 如图像, 字体, 样式等, 它们也需要被模块化. 在这里, 如果 Logo 图片也能被模块化然后引入该多好. 我们需要再次配置 Webpack.


安装对应的 loader:
npm install url-loader file-loader --save-dev

配置 webpack.config.js

loaders: [
 {
   test: /\.jsx?$/,
   exclude: /node_modules/,
   loader: 'babel',
   query: {
     presets: ['es2015','react']
   }
 },
 {
   test: /\.(png|jpg|gif)$/,
   loader: 'url-loader?limit=8192' // 这里的 limit=8192 表示用 base64 编码 <= ８K 的图像
 }
 ]
 
 
然后回到 NewsHeader.js
这时候你就可以使用 import 引入图片了.
import imageLogo from './y18.gif';
然后像这样使用.
<img src={imageLogo} />


需要添加样式, 还是回到刚刚的问题, 怎么引入样式?
我们也需要将样式模块化.
安装相应的 loader:
npm install css-loader style-loader --save-dev

css-loader 处理 css 文件中的 url() 表达式.
style-loader 将 css 代码插入页面中的 style 标签中.

在 webpack.config.js 中配置新的 loader.
{
 test: /\.css$/,
 loader: 'style!css'
}